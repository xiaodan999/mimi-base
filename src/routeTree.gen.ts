/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './../app/routes/__root'
import { Route as AboutImport } from './../app/routes/about'
import { Route as ProtectedImport } from './../app/routes/_protected'
import { Route as IndexImport } from './../app/routes/index'
import { Route as ProtectedSecretImport } from './../app/routes/_protected/secret'
import { Route as ProtectedLogoutImport } from './../app/routes/_protected/logout'
import { Route as ProtectedLoginImport } from './../app/routes/_protected/login'
import { Route as ProtectedMainImport } from './../app/routes/_protected/_main'
import { Route as ProtectedMainHomeImport } from './../app/routes/_protected/_main/home'
import { Route as ProtectedMainPhotosIndexImport } from './../app/routes/_protected/_main/photos/index'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedSecretRoute = ProtectedSecretImport.update({
  id: '/secret',
  path: '/secret',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedLogoutRoute = ProtectedLogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedLoginRoute = ProtectedLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedMainRoute = ProtectedMainImport.update({
  id: '/_main',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedMainHomeRoute = ProtectedMainHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => ProtectedMainRoute,
} as any)

const ProtectedMainPhotosIndexRoute = ProtectedMainPhotosIndexImport.update({
  id: '/photos/',
  path: '/photos/',
  getParentRoute: () => ProtectedMainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/_protected/_main': {
      id: '/_protected/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedMainImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/login': {
      id: '/_protected/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof ProtectedLoginImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/logout': {
      id: '/_protected/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof ProtectedLogoutImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/secret': {
      id: '/_protected/secret'
      path: '/secret'
      fullPath: '/secret'
      preLoaderRoute: typeof ProtectedSecretImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/_main/home': {
      id: '/_protected/_main/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtectedMainHomeImport
      parentRoute: typeof ProtectedMainImport
    }
    '/_protected/_main/photos/': {
      id: '/_protected/_main/photos/'
      path: '/photos'
      fullPath: '/photos'
      preLoaderRoute: typeof ProtectedMainPhotosIndexImport
      parentRoute: typeof ProtectedMainImport
    }
  }
}

// Create and export the route tree

interface ProtectedMainRouteChildren {
  ProtectedMainHomeRoute: typeof ProtectedMainHomeRoute
  ProtectedMainPhotosIndexRoute: typeof ProtectedMainPhotosIndexRoute
}

const ProtectedMainRouteChildren: ProtectedMainRouteChildren = {
  ProtectedMainHomeRoute: ProtectedMainHomeRoute,
  ProtectedMainPhotosIndexRoute: ProtectedMainPhotosIndexRoute,
}

const ProtectedMainRouteWithChildren = ProtectedMainRoute._addFileChildren(
  ProtectedMainRouteChildren,
)

interface ProtectedRouteChildren {
  ProtectedMainRoute: typeof ProtectedMainRouteWithChildren
  ProtectedLoginRoute: typeof ProtectedLoginRoute
  ProtectedLogoutRoute: typeof ProtectedLogoutRoute
  ProtectedSecretRoute: typeof ProtectedSecretRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedMainRoute: ProtectedMainRouteWithChildren,
  ProtectedLoginRoute: ProtectedLoginRoute,
  ProtectedLogoutRoute: ProtectedLogoutRoute,
  ProtectedSecretRoute: ProtectedSecretRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedMainRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof ProtectedLoginRoute
  '/logout': typeof ProtectedLogoutRoute
  '/secret': typeof ProtectedSecretRoute
  '/home': typeof ProtectedMainHomeRoute
  '/photos': typeof ProtectedMainPhotosIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedMainRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof ProtectedLoginRoute
  '/logout': typeof ProtectedLogoutRoute
  '/secret': typeof ProtectedSecretRoute
  '/home': typeof ProtectedMainHomeRoute
  '/photos': typeof ProtectedMainPhotosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/about': typeof AboutRoute
  '/_protected/_main': typeof ProtectedMainRouteWithChildren
  '/_protected/login': typeof ProtectedLoginRoute
  '/_protected/logout': typeof ProtectedLogoutRoute
  '/_protected/secret': typeof ProtectedSecretRoute
  '/_protected/_main/home': typeof ProtectedMainHomeRoute
  '/_protected/_main/photos/': typeof ProtectedMainPhotosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/logout'
    | '/secret'
    | '/home'
    | '/photos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/logout'
    | '/secret'
    | '/home'
    | '/photos'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/about'
    | '/_protected/_main'
    | '/_protected/login'
    | '/_protected/logout'
    | '/_protected/secret'
    | '/_protected/_main/home'
    | '/_protected/_main/photos/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AboutRoute: typeof AboutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  AboutRoute: AboutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/_main",
        "/_protected/login",
        "/_protected/logout",
        "/_protected/secret"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/_protected/_main": {
      "filePath": "_protected/_main.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/_main/home",
        "/_protected/_main/photos/"
      ]
    },
    "/_protected/login": {
      "filePath": "_protected/login.tsx",
      "parent": "/_protected"
    },
    "/_protected/logout": {
      "filePath": "_protected/logout.tsx",
      "parent": "/_protected"
    },
    "/_protected/secret": {
      "filePath": "_protected/secret.tsx",
      "parent": "/_protected"
    },
    "/_protected/_main/home": {
      "filePath": "_protected/_main/home.tsx",
      "parent": "/_protected/_main"
    },
    "/_protected/_main/photos/": {
      "filePath": "_protected/_main/photos/index.tsx",
      "parent": "/_protected/_main"
    }
  }
}
ROUTE_MANIFEST_END */
